=begin pod

=head1 NAME

Getopt::Advance - An advance command line option parsing tools.

=head1 SYNOPSIS

=begin code
#!/usr/bin/env perl6

use Getopt::Advance;
use Getopt::Advance::Helper;
use Getopt::Advance::Exception;

my @files = [];
my OptionSet $optset .= new;

$optset.insert-pos(
    "directory",
    0,
    sub ($, $dirarg) {
        die "$dirarg: Not a valid directory" if $dirarg.value.IO !~~ :d;
        @files = gather &find($dirarg.value.IO);
    }
);
$optset.append(
    "h|help=b"      => "print this help.",
    "v|version=b"   => "print program version.",
    "?=b"           => "same as -h.",
    :multi
);
$optset.append(
    'd=b' => 'specify file type to directory',
    'l=b' => 'specify file type to symlink',
    'f=b' => 'specify file type to normal file',
    :radio
);
for <d l f> -> $t {
    $optset.set-callback(
        $t,
        -> $, $ { @files = @files.grep({ ."{$t}"(); }); }
    );
}
$optset.push(
    'size=i',
    'the minimum size limit of file.',
    callback => sub ($, $size) {
        @files = @files.grep({ .s() >= $size.Int; });
    }
);
$optset.insert-main(
    sub main($optset, @args) {
        if $optset.get-pos('directory', 0).?success {
            @args.shift;
        } else {
            &ga-want-helper();
        }
        my $regex = +@args > 0 ?? @args.shift.value !! "";

        if $regex eq "" {
            .path.say for @files;
        } else {
            .path.say if .path ~~ /<$regex>/ for @files;
        }
    }
);
&getopt($optset, :autohv, helper => &ga-helper2);

sub find($dir) {
    for $dir.dir() -> $f {
        take $f;
        if $f ~~ :d {
            &find($f);
        }
    }
}

=end code

=begin code
The help of script:
Usage:
./find-file.p6 <directory>  [-h|--help] [-v|--version] [-?] [--size=<integer>] [-d] [-l] [-f]  *@args

-h|--help         print this help.

-v|--version      print program version.

-?                same as -h.

--size=<integer>  the minimum size limit of file.

-d                specify file type to directory

-l                specify file type to symlink

-f                specify file type to normal file
=end code


=head1 DESCRIPTION

`Getopt::Advance` is a powerful command line option parsing module, it suppot many
style such as: `unix-style`、`gnu-style`、`bsd-style`.etc. It support `Hash`、`Array`
option compared to traditional command line tools. In addition, it also support
`radio`、`multi` group mechanism which can manage option realtionship. And to handle
non-option argument, it provide `main`、`pos` and `cmd` feature.

=head1 getopt

=item getopt(       Str $optstring, *%args) of Getopt::Advance::ReturnValue
=item getopt(@args, Str $optstring, *%args) of Getopt::Advance::ReturnValue
=item getopt(       *@optsets,      *%args) of Getopt::Advance::ReturnValue
=item getopt(@args, *@optsets,      *%args) of Getopt::Advance::ReturnValue

Sub `&getopt` accept one or multi `OptionSet`, pass it and command line argument
to the `&parser`. Once an `OptionSet` matching success, it will return an instance of 
`Getopt::Advance::ReturnValue`.

=head2 argument of getopt

=item $optstring

    `&getopt` support string format which GNU getopt(3) use. It will call method
    `OptionSet.new-from-string` create a instance of `OptionSet`.

=item @args

    Let `&getopt` parse command line from @args. In default, `&getopt` parse command
    line argument from @*ARGS.

=item *@optsets

    You can pass multi `OptionSet` to `&getopt`.

=item *%args

    Named argument of `&getopt`. There will be an introduction below.

If an `OptionSet` match failed, consider follow serveral situation:

=item default

    `&getopt` will print helper(when help generator `&helper` defined) of current
    `OptionSet`, print error message, and rethrow the exception.

=item X::GA::ParseFailed

    The `&parser` will call `&ga-try-next` throw an X::GA::ParseFailed exception
    when `OptionSet` match failed. When `&getopt` caught this exception, it will
    try next `OptionSet` supplied. If no more `OptionSet`, it will print helper
    (when help generator `&helper` defined) of all `OptionSet`,  print error message,
    and rethrow the exception. The user also can throw this exception in
    `&callback` of `Option`.

=item X::GA::WantPrintHelper

    The user can call `&ga-want-helper` ask `&parser` interrupt the parsing process,
    and print help message of current `OptionSet`. `&getopt` will print helper (when
    help generator `&helper` defined) of current `OptionSet` and exit with 0.

=item X::GA::WantPrintAllHelper

    The user can call `&ga-want-all-helper` ask `&parser` interrupt the parsing process,
    and print help message of all `OptionSet`. `&getopt` will print helper(when
    help generator `&helper` defined) of all `OptionSet` and exit with 0.

=head2 named argument of getopt

=item :&helper = &ga-helper

    `&helper` will generate and display help message of `OptionSet`, default is `&ga-helper`.

=item :$stdout = $*OUT

    Help and Version message will print to `$stdout`, default is `$*OUT`.

=item :$stderr = $*ERR

    Error message will print to `$stderr`, default is `$*ERR`.

=item :$parser = &ga-parser

    Command line argument parser, default is `&ga-parser`.

=item :$strict = True

    When `$strict` is True, argument of option should not be begin with `-` or `--`.

=item :$autohv = False

    When `$autohv` is True, `&getopt` will automate print `$version` information 
    and help message.

=item :$version

    Program version information.

=item :$bsd-style

    When `$bsd-style` is True, `&parser` will accept bsd style option.

=item :$x-style

    When `$x-style` is True, x-style have priority over unix-style.

=head2 return value

=begin code
class Getopt::Advance::ReturnValue {
    has $.optionset;
    has @.noa;
    has %.return-value;
}
=end code

    When one of given `OptionSet`s matched, it return an instance of `Getopt::Advance::ReturnValue`.
    or it throw an exception.
    When user call `&ga-want-helper` or `&ga-want-all-helper` ask help message, `&getopt` will 
    call exit with 0.

=head1 OptionSet

=head1 Option

=head1 NonOption

=head1 Group

=head1 Types

=head1 Exception

=head1 Argument

=head1 Parser

=end pod
